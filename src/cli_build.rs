use std::path::PathBuf;

use clap::{Args, ValueEnum};
use strum::{AsRefStr, Display};

#[derive(Args)]
pub struct BuildArguments {
    /// Target platform to build the project for (e.g., win64, android, webgl). Required.
    #[arg(value_enum, env = crate::cli::ENV_BUILD_TARGET)]
    pub target: BuildOpenTarget,

    /// Path to the Unity project directory. Defaults to the current directory.
    #[arg(value_name = "DIRECTORY", value_hint = clap::ValueHint::DirPath, default_value = ".")]
    pub project_dir: PathBuf,

    /// Specify the exact output directory for the build artifacts.
    /// If not set, defaults to '<PROJECT_DIR>/Builds/<TYPE>/<TARGET>'.
    #[arg(
        short = 'o',
        long = "output",
        value_name = "DIRECTORY",
        value_hint = clap::ValueHint::FilePath
    )]
    pub build_path: Option<PathBuf>,

    /// Subdirectory name ('release' or 'debug') used within the default output path structure.
    ///
    /// Ignored if --output is specified.
    #[arg(
        short = 't',
        long = "type",
        value_name = "TYPE",
        default_value = "release"
    )]
    pub output_type: BuildOutputType,

    /// Automatically run the built player after a successful build.
    ///
    /// Shortcut for '--build-options AutoRunPlayer'.
    #[arg(short = 'r', long = "run")]
    pub run_player: bool,

    /// Create a development build (enables debugging symbols, profiler connection).
    ///
    /// Shortcut for '--build-options Development'.
    #[arg(short = 'd', long = "development")]
    pub development_build: bool,

    /// Show the output folder in the file explorer after a successful build (Windows/macOS).
    ///
    /// Shortcut for '--build-options ShowBuiltPlayer'.
    #[arg(short = 'S', long = "show")]
    pub show_built_player: bool,

    /// Allow the built player to be debugged remotely.
    ///
    /// Shortcut for '--build-options AllowDebugging'.
    #[arg(short = 'D', long = "debugging")]
    pub allow_debugging: bool,

    /// Build the player with profiling enabled and automatically connect to the editor.
    ///
    /// Shortcut for '--build-options ConnectWithProfiler'.
    #[arg(short = 'p', long = "profiling")]
    pub connect_with_profiler: bool,

    /// Enable deep profiling support in the player (requires 'profiling' to be useful).
    ///
    /// Shortcut for '--build-options EnableDeepProfilingSupport'.
    #[arg(short = 'P', long = "deep-profiling")]
    pub deep_profiling: bool,

    /// Make the player attempt to connect back to the Editor instance that built it.
    ///
    /// Shortcut for '--build-options ConnectToHost'.
    #[arg(short = 'H', long = "connect-host")]
    pub connect_to_host: bool,

    /// Set specific Unity BuildOptions flags (space-separated, e.g., -O Development AllowDebugging).
    ///
    /// Use 'None' explicitly if needed, though it's the default if no flags are set.
    #[arg(num_args(0..), short = 'O', long, value_name = "OPTION", default_value = "none")]
    pub build_options: Vec<BuildOptions>,

    /// Custom argument string passed to methods marked with the [UcomPreProcessBuild] attribute.
    ///
    /// Useful for passing version numbers or configuration flags into the build script.
    /// Requires the ucom build script ('UnityBuilder.cs' or similar) to be present.
    #[arg(short = 'a', long, value_name = "STRING")]
    pub build_args: Option<String>,

    /// Clean the output directory by removing files not generated by the current build.
    #[arg(short = 'C', long)]
    pub clean: bool,

    /// Control how the required build script (UnityBuilder.cs) is handled.
    #[arg(short = 'i', long, value_name = "METHOD", default_value = "auto")]
    pub inject: InjectAction,

    /// Specify the execution mode for the Unity build process.
    #[arg(short = 'm', long, value_name = "MODE", default_value = "batch")]
    pub mode: BuildMode,

    /// The static C# function to execute for building (e.g., 'MyNamespace.MyBuilder.Build').
    ///
    /// Defaults to the function provided by the injected ucom build script.
    #[arg(
        short = 'f',
        long,
        value_name = "FUNCTION",
        default_value = "Ucom.UnityBuilder.Build"
    )]
    pub build_function: String,

    /// Redirect Unity's build log output to a specific file path.
    ///
    /// Defaults to a file inside the '<PROJECT_DIR>/Logs' directory.
    #[arg(short = 'l', long, value_name = "FILE")]
    pub log_file: Option<PathBuf>,

    /// Suppress Unity build log output from appearing in the terminal (stdout/stderr).
    #[arg(short = 'q', long)]
    pub quiet: bool,

    /// Show the command that would be executed without actually running it.
    #[arg(short = 'n', long)]
    pub dry_run: bool,

    /// Additional arguments to pass directly to the Unity editor executable during the build.
    #[arg(last = true, value_name = "UNITY_ARGS")]
    pub args: Option<Vec<String>>,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum InjectAction {
    /// Automatically inject the build script if missing, remove it afterward (default).
    Auto,
    /// Inject the build script if missing, leave it in the project permanently.
    Persistent,
    /// Do not inject; fail if the specified build function doesn't exist.
    Off,
}

#[derive(Display, AsRefStr, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum BuildOutputType {
    /// Use 'Release' as the subdirectory name in the default output path.
    Release,
    /// Use 'Debug' as the subdirectory name in the default output path.
    Debug,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum BuildMode {
    /// Run Unity in batch mode (no UI, exits after build). Recommended for automation.
    #[value(name = "batch")]
    Batch,

    /// Run Unity in batch mode without initializing graphics. Faster for server builds.
    #[value(name = "batch-nogfx")]
    BatchNoGraphics,

    /// Open the Unity Editor normally, perform the build, then quit.
    #[value(name = "editor-quit")]
    EditorQuit,

    /// Open the Unity Editor normally, perform the build, and keep the editor open.
    #[value(name = "editor")]
    Editor,
}

/// Represents the active build target platform setting within the Unity Editor.
#[derive(Display, AsRefStr, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
#[allow(non_camel_case_types)]
pub enum OpenTarget {
    /// Generic Standalone target (platform determined by editor context).
    Standalone,
    /// Standalone Windows 32-bit.
    #[value(name = "win32")]
    Win,
    /// Standalone Windows 64-bit.
    #[value(name = "win64")]
    Win64,
    /// Standalone macOS (Universal Binary).
    #[value(name = "macos")]
    OSXUniversal,
    /// Standalone Linux 64-bit.
    #[value(name = "linux64")]
    Linux64,
    /// Apple iOS.
    #[value(name = "ios")]
    iOS,
    /// Google Android.
    #[value(name = "android")]
    Android,
    /// WebGL.
    #[value(name = "webgl")]
    WebGL,
    /// Universal Windows Platform.
    #[value(name = "winstore")]
    WindowsStoreApps,
    /// Apple tvOS.
    #[value(name = "tvos")]
    tvOS,
}

/// Specifies the target platform for the 'build' command.
#[derive(Display, AsRefStr, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
#[allow(non_camel_case_types)]
pub enum BuildOpenTarget {
    /// Build for Windows 32-bit.
    #[value(name = "win32")]
    Win,
    /// Build for Windows 64-bit.
    #[value(name = "win64")]
    Win64,
    /// Build for macOS (Universal Binary).
    #[value(name = "macos")]
    OSXUniversal,
    /// Build for Linux 64-bit.
    #[value(name = "linux64")]
    Linux64,
    /// Build for Apple iOS (generates an Xcode project).
    #[value(name = "ios")]
    iOS,
    /// Build for Google Android (generates APK/AAB or Gradle project).
    #[value(name = "android")]
    Android,
    /// Build for WebGL.
    #[value(name = "webgl")]
    WebGL,
    // Note: Add other buildable targets like UWP, tvOS if supported by the build script.
}

/// Internal enum representing UnityEditor.BuildTarget, used by the build script.
/// Maps from the user-facing BuildOpenTarget.
#[derive(Display, AsRefStr, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
#[allow(non_camel_case_types)]
pub enum BuildScriptTarget {
    /// UnityEditor.BuildTarget.StandaloneOSX
    StandaloneOSX,
    /// UnityEditor.BuildTarget.StandaloneWindows
    StandaloneWindows,
    /// UnityEditor.BuildTarget.StandaloneWindows64
    StandaloneWindows64,
    /// UnityEditor.BuildTarget.StandaloneLinux64
    StandaloneLinux64,
    /// UnityEditor.BuildTarget.iOS
    iOS,
    /// UnityEditor.BuildTarget.Android
    Android,
    /// UnityEditor.BuildTarget.WebGL
    WebGL,
}

impl From<BuildOpenTarget> for BuildScriptTarget {
    fn from(target: BuildOpenTarget) -> Self {
        match target {
            BuildOpenTarget::Win => Self::StandaloneWindows,
            BuildOpenTarget::Win64 => Self::StandaloneWindows64,
            BuildOpenTarget::OSXUniversal => Self::StandaloneOSX, // Assumes Universal mapping
            BuildOpenTarget::Linux64 => Self::StandaloneLinux64,
            BuildOpenTarget::iOS => Self::iOS,
            BuildOpenTarget::Android => Self::Android,
            BuildOpenTarget::WebGL => Self::WebGL,
        }
    }
}

/// Flags corresponding to UnityEditor.BuildOptions, controlling build characteristics.
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum BuildOptions {
    /// Perform a default build with no special options.
    None = 0,

    /// Build a development version with debug symbols and profiler capabilities.
    Development = 1,

    /// Automatically run the built player after the build finishes.
    AutoRunPlayer = 4,

    /// Reveal the built player in the OS file explorer (Windows/macOS).
    ShowBuiltPlayer = 8,

    /// Include non-main scenes marked in Build Settings as streamed scenes in AssetBundles. (Less common)
    BuildAdditionalStreamedScenes = 16, // 0x00000010

    /// Allow patching of the generated Xcode (iOS) or Gradle (Android) project.
    AcceptExternalModificationsToPlayer = 32, // 0x00000020

    /// Force a clean build, discarding any cached build data.
    CleanBuildCache = 0x0000_0080,

    /// Enable the profiler and auto-connect the player to the Editor.
    ConnectWithProfiler = 0x0000_0100,

    /// Allow script debugging connections to the built player.
    AllowDebugging = 0x0000_0200,

    /// Create symlinks for script files instead of copying them (Platform dependent).
    SymlinkSources = 0x0000_0400, // Deprecated/Renamed in recent Unity versions? Verify. Often SymlinkLibraries.

    /// Build asset bundles without compression.
    UncompressedAssetBundle = 0x0000_0800,

    /// Make the player attempt to connect back to the Editor that initiated the build.
    ConnectToHost = 0x0000_1000,

    /// Use a custom connection ID for player-editor communication. (Advanced)
    CustomConnectionId = 0x0000_2000,

    /// Compile scripts only, do not build player data.
    BuildScriptsOnly = 0x0000_8000,

    /// Create a patch package for Android development builds.
    PatchPackage = 0x0001_0000,

    /// Use LZ4 compression for player data (default for many platforms).
    CompressWithLz4 = 0x0004_0000,

    /// Use LZ4 high-compression for player data (slower build, potentially smaller size).
    CompressWithLz4HC = 0x0008_0000,

    /// Treat any build errors as fatal, failing the build immediately.
    StrictMode = 0x0020_0000,

    /// Include assemblies marked for testing in the build.
    IncludeTestAssemblies = 0x0040_0000,

    /// Use a fixed, zero GUID for the build (internal use).
    NoUniqueIdentifier = 0x0080_0000,

    /// Make the player wait for a debugger/profiler connection on startup.
    WaitForPlayerConnection = 0x0200_0000,

    /// Enable code coverage data collection in the build.
    EnableCodeCoverage = 0x0400_0000,

    /// Enable deep profiling support in the player (increases overhead).
    EnableDeepProfilingSupport = 0x1000_0000,

    /// Generate a detailed report about the build process and assets included.
    DetailedBuildReport = 0x2000_0000,

    /// Enable shader live-link support for faster shader iteration (requires editor connection).
    ShaderLivelinkSupport = 0x4000_0000,
}
